<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Enable annotation-based configuration. Open EmployeeDAO.java and DatabaseInitializer.java 
		for details. -->
	<context:annotation-config />
	<context:component-scan base-package="com.riders" scoped-proxy="targetClass" />

	<!-- Simple Spring-managed DataSource for embedded h2 database (http://www.h2database.com). 
		H2 is used instead of HSQLDB in this Test Drive because it has better support 
		for retrieving autogenerated keys using the JDBC 3 approach which is used 
		by Spring's JdbcTemplate. The dbInit bean takes care of creating and populating 
		the sample tables. -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/postgres" />
		<property name="username" value="postgres" />
		<property name="password" value="admin" />
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.default_schema">riders</prop>
			</props>
		</property>

		<property name="annotatedClasses">
			<list>
				<value>com.riders.model.Factura</value>
				<value>com.riders.model.Usuario</value>
				<value>com.riders.model.Producto</value>
				<value>com.riders.model.Cliente</value>
				<value>com.riders.model.CarroCompra</value>
				<value>com.riders.model.Consulta</value>
				<value>com.riders.model.CuentaCorriente</value>
				<value>com.riders.model.Domicilio</value>
				<value>com.riders.model.ItemCarro</value>
				<value>com.riders.model.ItemPago</value>
				<value>com.riders.model.Promocion</value>
				<value>com.riders.model.Proveedor</value>
				<value>com.riders.model.Remito</value>
				<value>com.riders.model.Respuesta</value>
				<value>com.riders.model.Stock</value>
				<value>com.riders.model.Vendedor</value>
			</list>
		</property>

	</bean>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- enable the configuration of transactional behavior based on annotations -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

</beans>